using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using System.Text.Json.Serialization;

namespace CodeCasa.AutoGenerated;

public partial class SensorEntities
{
    private readonly IHaContext _haContext;

    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.")).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all non-numeric sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAllNonNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && !(e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all numeric sensor entities currently registered (at runtime) in Home Assistant as NumericSensorEntity</summary>
    public IEnumerable<NumericSensorEntity> EnumerateAllNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && (e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new NumericSensorEntity(e));

    ///<summary>Living Room Temperature</summary>
    public NumericSensorEntity LivingRoomTemperature => new(_haContext, "sensor.living_room_temperature");
    ///<summary>Meteorologisk Temperature</summary>
    public NumericSensorEntity MeteorologiskTemperature => new(_haContext, "sensor.meteorologisk_temperature");

    ///<summary>Living Room speaker alarms</summary>
    public SensorEntity LivingRoomSpeakerAlarms => new(_haContext, "sensor.living_room_speaker_alarms");
    ///<summary>Living Room speaker timers</summary>
    public SensorEntity LivingRoomSpeakerTimers => new(_haContext, "sensor.living_room_speaker_timers");
    ///<summary>Office speaker alarms</summary>
    public SensorEntity OfficeSpeakerAlarms => new(_haContext, "sensor.office_speaker_alarms");
    ///<summary>Office speaker timers</summary>
    public SensorEntity OfficeSpeakerTimers => new(_haContext, "sensor.office_speaker_timers");
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("time")]
    public string? Time { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("Local Time")]
    public string? LocalTime { get; init; }

    [JsonPropertyName("Package")]
    public string? Package { get; init; }

    [JsonPropertyName("Time in Milliseconds")]
    public double? TimeinMilliseconds { get; init; }

    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }

    [JsonPropertyName("auth_token")]
    public string? AuthToken { get; init; }

    [JsonPropertyName("ip_address")]
    public string? IpAddress { get; init; }

    [JsonPropertyName("available")]
    public bool? Available { get; init; }

    [JsonPropertyName("next_alarm_status")]
    public string? NextAlarmStatus { get; init; }

    [JsonPropertyName("alarm_volume")]
    public double? AlarmVolume { get; init; }

    [JsonPropertyName("alarms")]
    public IReadOnlyList<object>? Alarms { get; init; }

    [JsonPropertyName("next_timer_status")]
    public string? NextTimerStatus { get; init; }

    [JsonPropertyName("timers")]
    public IReadOnlyList<object>? Timers { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("info")]
    public string? Info { get; init; }

    [JsonPropertyName("serial")]
    public string? Serial { get; init; }

    [JsonPropertyName("location")]
    public string? Location_0 { get; init; }

    [JsonPropertyName("Location")]
    public IReadOnlyList<double>? Location_1 { get; init; }

    [JsonPropertyName("state_message")]
    public string? StateMessage { get; init; }

    [JsonPropertyName("state_reason")]
    public object? StateReason { get; init; }

    [JsonPropertyName("command_set")]
    public string? CommandSet { get; init; }

    [JsonPropertyName("uri_supported")]
    public string? UriSupported { get; init; }

    [JsonPropertyName("Wastecollector")]
    public string? Wastecollector { get; init; }

    [JsonPropertyName("Hidden")]
    public bool? Hidden { get; init; }

    [JsonPropertyName("Sort_date")]
    public double? SortDate { get; init; }

    [JsonPropertyName("Days_until")]
    public double? DaysUntil { get; init; }

    [JsonPropertyName("Cellular Technology")]
    public string? CellularTechnology { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("Administrative Area")]
    public string? AdministrativeArea { get; init; }

    [JsonPropertyName("Areas Of Interest")]
    public object? AreasOfInterest { get; init; }

    [JsonPropertyName("Country")]
    public string? Country { get; init; }

    [JsonPropertyName("Inland Water")]
    public string? InlandWater { get; init; }

    [JsonPropertyName("Locality")]
    public string? Locality { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Ocean")]
    public string? Ocean { get; init; }

    [JsonPropertyName("Postal Code")]
    public string? PostalCode { get; init; }

    [JsonPropertyName("Sub Administrative Area")]
    public string? SubAdministrativeArea { get; init; }

    [JsonPropertyName("Sub Locality")]
    public string? SubLocality { get; init; }

    [JsonPropertyName("Sub Thoroughfare")]
    public string? SubThoroughfare { get; init; }

    [JsonPropertyName("Thoroughfare")]
    public string? Thoroughfare { get; init; }

    [JsonPropertyName("Time Zone")]
    public string? TimeZone { get; init; }

    [JsonPropertyName("Zones")]
    public object? Zones { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("run_completed")]
    public string? RunCompleted { get; init; }

    [JsonPropertyName("error_state")]
    public string? ErrorState { get; init; }

    [JsonPropertyName("start_time")]
    public object? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public object? EndTime { get; init; }

    [JsonPropertyName("initial_time")]
    public string? InitialTime { get; init; }

    [JsonPropertyName("remain_time")]
    public string? RemainTime { get; init; }

    [JsonPropertyName("reserve_time")]
    public string? ReserveTime { get; init; }

    [JsonPropertyName("current_course")]
    public string? CurrentCourse { get; init; }

    [JsonPropertyName("run_state")]
    public string? RunState { get; init; }

    [JsonPropertyName("process_state")]
    public string? ProcessState { get; init; }

    [JsonPropertyName("error_message")]
    public string? ErrorMessage { get; init; }

    [JsonPropertyName("dry_level")]
    public string? DryLevel { get; init; }

    [JsonPropertyName("eco_hybrid")]
    public string? EcoHybrid { get; init; }

    [JsonPropertyName("standby")]
    public string? Standby { get; init; }

    [JsonPropertyName("anti_crease")]
    public string? AntiCrease { get; init; }

    [JsonPropertyName("child_lock")]
    public string? ChildLock { get; init; }

    [JsonPropertyName("damp_dry_beep")]
    public string? DampDryBeep { get; init; }

    [JsonPropertyName("hand_iron")]
    public string? HandIron { get; init; }

    [JsonPropertyName("remote_start")]
    public string? RemoteStart { get; init; }

    [JsonPropertyName("reservation")]
    public string? Reservation { get; init; }

    [JsonPropertyName("self_clean")]
    public string? SelfClean { get; init; }
}