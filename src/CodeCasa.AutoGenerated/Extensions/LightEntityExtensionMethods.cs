using CodeCasa.AutoGenerated.Parameters;
using NetDaemon.HassModel.Entities;

namespace CodeCasa.AutoGenerated.Extensions
{
    public static class LightEntityExtensionMethods
    {
        ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
        public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
        {
            target.CallService("toggle", data);
        }

        ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
        public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
        {
            target.CallService("toggle", data);
        }

        ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
        ///<param name="target">The ILightEntityCore to call this service for</param>
        ///<param name="transition">Duration it takes to get to next state.</param>
        ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
        ///<param name="kelvin">Color temperature in Kelvin.</param>
        ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
        ///<param name="effect">Light effect.</param>
        ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
        ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
        ///<param name="colorName"></param>
        ///<param name="hsColor"> eg: [300, 70]</param>
        ///<param name="xyColor"> eg: [0.52, 0.43]</param>
        ///<param name="colorTemp"></param>
        ///<param name="brightness"></param>
        ///<param name="white"></param>
        ///<param name="profile"> eg: relax</param>
        ///<param name="flash"></param>
        public static void Toggle(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
        {
            target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
        }

        ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
        ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
        ///<param name="transition">Duration it takes to get to next state.</param>
        ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
        ///<param name="kelvin">Color temperature in Kelvin.</param>
        ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
        ///<param name="effect">Light effect.</param>
        ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
        ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
        ///<param name="colorName"></param>
        ///<param name="hsColor"> eg: [300, 70]</param>
        ///<param name="xyColor"> eg: [0.52, 0.43]</param>
        ///<param name="colorTemp"></param>
        ///<param name="brightness"></param>
        ///<param name="white"></param>
        ///<param name="profile"> eg: relax</param>
        ///<param name="flash"></param>
        public static void Toggle(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
        {
            target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
        }

        ///<summary>Turns off one or more lights.</summary>
        public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
        {
            target.CallService("turn_off", data);
        }

        ///<summary>Turns off one or more lights.</summary>
        public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
        {
            target.CallService("turn_off", data);
        }

        ///<summary>Turns off one or more lights.</summary>
        ///<param name="target">The ILightEntityCore to call this service for</param>
        ///<param name="transition">Duration it takes to get to next state.</param>
        ///<param name="flash"></param>
        public static void TurnOff(this ILightEntityCore target, double? transition = null, object? flash = null)
        {
            target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
        }

        ///<summary>Turns off one or more lights.</summary>
        ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
        ///<param name="transition">Duration it takes to get to next state.</param>
        ///<param name="flash"></param>
        public static void TurnOff(this IEnumerable<ILightEntityCore> target, double? transition = null, object? flash = null)
        {
            target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
        }

        ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
        public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
        {
            target.CallService("turn_on", data);
        }

        ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
        public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
        {
            target.CallService("turn_on", data);
        }

        ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
        ///<param name="target">The ILightEntityCore to call this service for</param>
        ///<param name="transition">Duration it takes to get to next state.</param>
        ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
        ///<param name="kelvin">Color temperature in Kelvin.</param>
        ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
        ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
        ///<param name="effect">Light effect.</param>
        ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
        ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
        ///<param name="colorName"></param>
        ///<param name="hsColor"> eg: [300, 70]</param>
        ///<param name="xyColor"> eg: [0.52, 0.43]</param>
        ///<param name="colorTemp"></param>
        ///<param name="brightness"></param>
        ///<param name="brightnessStep"></param>
        ///<param name="white"></param>
        ///<param name="profile"> eg: relax</param>
        ///<param name="flash"></param>
        public static void TurnOn(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
        {
            target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
        }

        ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
        ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
        ///<param name="transition">Duration it takes to get to next state.</param>
        ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
        ///<param name="kelvin">Color temperature in Kelvin.</param>
        ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
        ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
        ///<param name="effect">Light effect.</param>
        ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
        ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
        ///<param name="colorName"></param>
        ///<param name="hsColor"> eg: [300, 70]</param>
        ///<param name="xyColor"> eg: [0.52, 0.43]</param>
        ///<param name="colorTemp"></param>
        ///<param name="brightness"></param>
        ///<param name="brightnessStep"></param>
        ///<param name="white"></param>
        ///<param name="profile"> eg: relax</param>
        ///<param name="flash"></param>
        public static void TurnOn(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
        {
            target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
        }
    }
}
