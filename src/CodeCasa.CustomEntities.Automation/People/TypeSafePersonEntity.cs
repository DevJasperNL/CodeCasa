using CodeCasa.AutoGenerated;
using CodeCasa.NetDaemon.Utilities.Entities;
using CodeCasa.Shared.Extensions;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;

namespace CodeCasa.CustomEntities.Automation.People;

public record TypeSafePersonEntity : EnumEntity<PersonEntityStates, TypeSafePersonEntity, EnumEntityState<PersonEntityStates, PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    private static readonly Dictionary<PersonEntityStates, string> PeopleEntityStatesToStateValues = new()
    {
        { PersonEntityStates.Home , "home" },
        { PersonEntityStates.NotHome , "not_home" }
    };
    public static readonly Dictionary<string, PersonEntityStates> StateValuesToPeopleEntityStates = PeopleEntityStatesToStateValues.Inverse(StringComparer.OrdinalIgnoreCase);

    public TypeSafePersonEntity(IHaContext haContext, string entityId) 
        : base(haContext, entityId, 
            e => PeopleEntityStatesToStateValues[e], 
            v => StateValuesToPeopleEntityStates.GetValueOrDefault(v, PersonEntityStates.NotHome)) // By using GetValueOrDefault, any zone outside home will result in state NotHome.
    {
    }

    public TypeSafePersonEntity(IEntityCore entity)
        : base(entity,
            e => PeopleEntityStatesToStateValues[e],
            v => StateValuesToPeopleEntityStates.GetValueOrDefault(v, PersonEntityStates.NotHome))
    {
    }
}