@using System.Text.Json
@using CodeCasa.AutoGenerated
@using CodeCasa.Dashboard.Icons
@using NetDaemon.HassModel
@using NetDaemon.HassModel.Entities
@using NetDaemon.InputSelectNotifications
@using NetDaemon.InputSelectNotifications.Config

@inject IHaContext HaContext
@inject InputSelectEntities InputSelectEntities

@for (var i = 0; i < _notifications.Length; i++)
{
    var index = i;
    var notification = _notifications[index];
    var icon = notification.Icon == null ? null : MudIcons.TryResolveMudIcon(notification.Icon);
    
    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Dark" OnClick="() => NotificationClicked(index)">
        <MudStack Row AlignItems="AlignItems.Center" Style="justify-content: flex-start; width: 100%;" Class="ma-2">
            @if (icon != null)
            {
                @if (notification.BadgeIcon != null || !string.IsNullOrEmpty(notification.BadgeContent))
                {
                    var badgeIcon = notification.BadgeIcon == null ? null : MudIcons.TryResolveMudIcon(notification.BadgeIcon);
                    var badgeContent = ParseContent(notification.BadgeContent);
                    @if (string.IsNullOrEmpty(notification.BadgeColor))
                    {
                        <MudBadge
                            Overlap="true"
                            Icon="@badgeIcon"
                            Content="@badgeContent"
                            Class="mr-2">
                            <MudIcon Icon="@icon" Style="@(string.IsNullOrEmpty(notification.IconColor) ? null : $"color: {notification.IconColor};")" />
                        </MudBadge>
                    }
                    else
                    {
                        <MudBadge
                            Overlap="true"
                            Icon="@badgeIcon"
                            Content="@badgeContent"
                            Class="mr-2"
                                  Style="@($"--badge-icon-bg: {notification.BadgeColor};")">
                            <MudIcon Icon="@icon" Style="@(string.IsNullOrEmpty(notification.IconColor) ? null : $"color: {notification.IconColor};")" />
                            <style>
                                .mud-badge {
                                    color: #FFFFFF !important; /* Icon color */
                                }

                                .mud-badge-icon {
                                    background-color: var(--badge-icon-bg) !important;
                                }
                            </style>
                        </MudBadge>
                    }
                }
                else
                {
                    <MudIcon Icon="@icon" Class="mr-2" Style="@(string.IsNullOrEmpty(notification.IconColor) ? null : $"color: {notification.IconColor};")" />
                }
            }
            <MudStack Spacing="0" AlignItems="AlignItems.Start">
                <MudText Typo="Typo.body1">@notification.Message</MudText>
                @if (!string.IsNullOrEmpty(notification.SecondaryMessage))
                {
                    <MudText Typo="Typo.body2">@notification.SecondaryMessage</MudText>
                }
            </MudStack>
        </MudStack>
    </MudButton>
}

@code {
    private DashboardNotificationInfo[] _notifications = [];
    protected override void OnInitialized()
    {
        InputSelectEntities.LivingRoomPanelNotifications.StateAllChangesWithCurrent().Subscribe(stateChange =>
        {
            if (stateChange.New?.Attributes?.Options == null || string.IsNullOrEmpty(stateChange.New.Attributes.Options.FirstOrDefault()))
            {
                _notifications = [];
                return;
            }
            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            _notifications = stateChange.New.Attributes.Options
                .Select(o => JsonSerializer.Deserialize<DashboardNotificationInfo>(o, jsonOptions))
                .Where(n => n != null)
                .Select(n => n!).ToArray();

            InvokeAsync(StateHasChanged).GetAwaiter().GetResult();
        });
    }

    private void NotificationClicked(int index)
    {
        HaContext.SendEvent("notification_clicked", new { notificationEntity = InputSelectEntities.LivingRoomPanelNotifications.EntityId, notificationIndex = index });
    }

    private object? ParseContent(string? content)
    {
        if (content == null)
        {
            return null;
        }

        if (int.TryParse(content, out var i))
        {
            return i;
        }
        if (double.TryParse(content, out var d))
        {
            return d;
        }

        return content;
    }
}
