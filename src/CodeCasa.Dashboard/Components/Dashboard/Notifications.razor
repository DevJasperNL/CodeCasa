@using System.Text.Json
@using CodeCasa.AutoGenerated
@using NetDaemon.HassModel.Entities
@using NetDaemon.InputSelectNotifications

@inject InputSelectEntities InputSelectEntities

<MudList T="string">
    @foreach (var notification in _notifications)
{
    <MudListItem T="string">
        <MudText Typo="Typo.body1">@notification.Message</MudText>
    </MudListItem>
}
</MudList>

@code {
    private DashboardNotificationInfo[] _notifications = [];

    protected override void OnInitialized()
    {
        InputSelectEntities.LivingRoomPanelNotifications.StateAllChangesWithCurrent().Subscribe(stateChange =>
        {
            if (stateChange.New?.Attributes?.Options == null || string.IsNullOrEmpty(stateChange.New.Attributes.Options.FirstOrDefault()))
            {
                _notifications = [];
                return;
            }
            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            _notifications = stateChange.New.Attributes.Options
                .Select(o => JsonSerializer.Deserialize<DashboardNotificationInfo>(o, jsonOptions))
                .Where(n => n != null)
                .Select(n => n!).ToArray();

            InvokeAsync(StateHasChanged).GetAwaiter().GetResult();
        });
    }
}
