@page "/"
@using CodeCasa.AutoGenerated
@using CodeCasa.CustomEntities.InputSelect
@using CodeCasa.CustomEntities.Weather
@using CodeCasa.Dashboard.Components.Demo
@using CodeCasa.Dashboard.Components.Dashboard
@using global::NetDaemon.HassModel.Entities
@using global::NetDaemon.RuntimeState

@inject NetDaemonRuntimeStateService NetDaemonConnectionStateService
@inject LivingRoomWallPanelView LivingRoomWallPanelView

@if (!_netDaemonInitialized)
{
    <MudAlert Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center">Loading NetDaemon...</MudAlert>
}

@if (_netDaemonInitialized)
{
    <PictureSlideShow ToBackground="@_slideShowToBackground" />
    <DemoMenu />

    <Notifications Visible="@_notificationsVisible" />

    <Temperatures Visible="_dateVisible" />

    <MudOverlay Visible="!_netDaemonConnected" Absolute="false" LightBackground="true">
        <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Disconnected From Home Assistant.</MudAlert>
    </MudOverlay>
}

<Clock Centered="_clockCentered" OnClick="ClockClicked" />
<Date Visible="_dateVisible" />

@code {
    private bool _netDaemonInitialized;
    private bool _netDaemonConnected;

    private bool _clockCentered = true;
    private bool _dateVisible;
    private bool _slideShowToBackground;
    private bool _notificationsVisible;

    protected override void OnInitialized()
    {
        NetDaemonConnectionStateService.ConnectedChangesWithCurrent().Subscribe(state =>
        {
            _netDaemonInitialized = state != NetDaemonStates.Initializing;
            _netDaemonConnected = state == NetDaemonStates.Connected;
            InvokeAsync(StateHasChanged);
        });

        LivingRoomWallPanelView.StateChangesWithCurrent().Subscribe(state =>
        {
            _clockCentered = state.New?.State == LivingRoomWallPanelView.States.Idle;
            _dateVisible = state.New?.State != LivingRoomWallPanelView.States.Idle;
            _slideShowToBackground = state.New?.State != LivingRoomWallPanelView.States.Idle;
            _notificationsVisible = state.New?.State == LivingRoomWallPanelView.States.Home;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ClockClicked()
    {
        if (!_netDaemonConnected || LivingRoomWallPanelView.State == LivingRoomWallPanelView.States.Idle)
        {
            return;
        }
        LivingRoomWallPanelView.SelectOption(LivingRoomWallPanelView.States.Idle);
    }
}

@* <style>
    body {
        background-color: black; /* For deployment to actual LCD screen */
    }
</style> *@