@page "/"
@using System.Reactive.Concurrency
@using CodeCasa.Dashboard.Components.Demo
@using NetDaemon.RuntimeState
@using Occurify.Reactive.Extensions
@using Occurify.TimeZones

@inject NetDaemonRuntimeStateService NetDaemonConnectionStateService

@if (!_netDaemonInitialized)
{
    <MudAlert Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center">Loading NetDaemon...</MudAlert>
}

@if (_netDaemonInitialized)
{
    <DemoMenu />
}

<MudText Typo="Typo.h1" Align="Align.Center"><b>@_currentTime.ToString("HH:mm")</b></MudText>

@if (_netDaemonInitialized)
{
    <MudOverlay Visible="!_netDaemonConnected" Absolute="false" LightBackground="true">
        <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Disconnected From Home Assistant.</MudAlert>
    </MudOverlay>
}

@code {
    private bool _netDaemonInitialized;
    private bool _netDaemonConnected;
    private DateTime _currentTime = DateTime.Now;
    

    protected override void OnInitialized()
    {
        NetDaemonConnectionStateService.ConnectedChangesWithCurrent().Subscribe(state =>
        {
            _netDaemonInitialized = state != NetDaemonStates.Initializing;
            _netDaemonConnected = state == NetDaemonStates.Connected;
            InvokeAsync(StateHasChanged);
        });

        var scheduler = new SynchronizationContextScheduler(SynchronizationContext.Current!);
        TimeZoneInstants.EverySecond().Subscribe(() =>
        {
            _currentTime = DateTime.Now;
            StateHasChanged();
        }, scheduler);
    }
}
