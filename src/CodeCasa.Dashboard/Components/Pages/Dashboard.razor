@page "/"
@using System.Reactive.Concurrency
@using System.Reactive.Linq
@using CodeCasa.AutoGenerated
@using CodeCasa.Dashboard.ViewModels
@using NetDaemon.Client
@using NetDaemon.Runtime
@using Occurify.Reactive.Extensions
@using Occurify.TimeZones

@inject INetDaemonRuntime NetDaemonRuntime
@inject IHomeAssistantRunner HomeAssistantRunner
@inject LightEntities LightEntities

@if (_netDaemonLoading)
{
    <MudAlert Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center">Loading NetDaemon...</MudAlert>
}

<MudText Typo="Typo.h3" Align="Align.Center">@_currentTime.ToString("HH:mm:ss")</MudText>

@if (!_netDaemonLoading)
{
    <MudOverlay Visible="!_connected" Absolute="false" LightBackground="true">
        <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Disconnected From Home Assistant.</MudAlert>
    </MudOverlay>
    <MudSwitch @bind-Value="_officeLight!.IsOn" Color="Color.Primary" Label="Office Lights" ThumbIcon="@Icons.Material.Filled.Lightbulb" Size="Size.Large"/>
}

@code {
    private bool _netDaemonLoading = true;
    private bool _connected;
    private DateTime _currentTime = DateTime.Now;
    private LightEntityVm? _officeLight;

    protected override void OnInitialized()
    {
        var scheduler = new SynchronizationContextScheduler(SynchronizationContext.Current!);
        TimeZoneInstants.EverySecond().Subscribe(() =>
        {
            _currentTime = DateTime.Now;
            StateHasChanged();
        }, scheduler);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        // We load the NetDaemon runtime here to avoid blocking the initial render so we can display the clock and loading message.
        await InitializeNetDaemon();
    }

    private async Task InitializeNetDaemon()
    {
        // Wait for NetDaemon to load
        await NetDaemonRuntime.WaitForInitializationAsync();

        Observable.Defer(() =>
        {
            return
                HomeAssistantRunner.OnDisconnect.Select(_ => false).Merge(
                    HomeAssistantRunner.OnConnect.Select(_ => true)).Prepend(
                    HomeAssistantRunner.CurrentConnection != null);
        }).Subscribe(c => _connected = c);

        _officeLight = new LightEntityVm(LightEntities.OfficeLights);

        _netDaemonLoading = false;
    }
}
