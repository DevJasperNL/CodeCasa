@page "/"
@using CodeCasa.CustomEntities.InputSelect
@using CodeCasa.Dashboard.Components.Demo
@using CodeCasa.Dashboard.Components.Dashboard
@using global::NetDaemon.HassModel.Entities
@using global::NetDaemon.RuntimeState

@inject NetDaemonRuntimeStateService NetDaemonConnectionStateService
@inject LivingRoomWallPanelView LivingRoomWallPanelView

@if (!_netDaemonInitialized)
{
    <MudAlert Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center">Loading NetDaemon...</MudAlert>
}

@if (_netDaemonInitialized)
{
    <DemoMenu />

    <Notifications Visible="@(!_centered)"/>

    <MudOverlay Visible="!_netDaemonConnected" Absolute="false" LightBackground="true">
        <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Disconnected From Home Assistant.</MudAlert>
    </MudOverlay>
}

<Clock Centered="_centered" />

@code {
    private bool _netDaemonInitialized;
    private bool _netDaemonConnected;

    private bool _centered = true;

    protected override void OnInitialized()
    {
        NetDaemonConnectionStateService.ConnectedChangesWithCurrent().Subscribe(state =>
        {
            _netDaemonInitialized = state != NetDaemonStates.Initializing;
            _netDaemonConnected = state == NetDaemonStates.Connected;
            InvokeAsync(StateHasChanged);
        });

        LivingRoomWallPanelView.StateChangesWithCurrent().Subscribe(state =>
        {
            _centered = state.New?.State == LivingRoomWallPanelView.LivingRoomWallPanelViewStates.Idle;
            InvokeAsync(StateHasChanged);
        });
    }
}

@* <style>
    body {
        background-color: black; /* For deployment to actual LCD screen */
    }
</style> *@