using CodeCasa.AutoGenerated;
using CodeCasa.CustomEntities.Events;
using Microsoft.Extensions.DependencyInjection;
using NetDaemon.AppModel;
using NetDaemon.HassModel;
using NetDaemon.InputSelectNotifications.Config;
using NetDaemon.InputSelectNotifications.Interact;
using System.Drawing;
using System.Reactive.Linq;
using NetDaemon.InputSelectNotifications;

namespace CodeCasa.Automations.Apps.Notifications;

[NetDaemonApp]
internal class DemoNotifications
{
    private List<InputSelectNotification> _notifications = new();

    public DemoNotifications(
        IHaContext haContext,
        LightEntities lightEntities, 
        [FromKeyedServices("input_select.living_room_panel_notifications")] IInputSelectNotificationEntity inputSelectNotifications)
    {
        haContext.Events.Where(e => e.EventType == Events.AddDemoNotificationEvent).Subscribe(_ =>
        {
            _notifications.Clear();

            var clickToRemoveNotificationId = $"{nameof(DemoNotifications)}_ClickToRemove";
            _notifications.Add(inputSelectNotifications.Notify(new InputSelectNotificationConfig
            {
                Message = "Demo Notification 1",
                SecondaryMessage = "Click to remove me.",
                Icon = "Icons.Material.Filled.AutoAwesome",
                BadgeIcon = "Icons.Material.Filled.Warning",
                Action = () => inputSelectNotifications.RemoveNotification(clickToRemoveNotificationId)
            }, clickToRemoveNotificationId));

            var clearNotificationId = $"{nameof(DemoNotifications)}_Clear";
            _notifications.Add(inputSelectNotifications.Notify(new InputSelectNotificationConfig
            {
                Message = "Demo Notification 2",
                SecondaryMessage = "Click to clear demo notifications.",
                Icon = "Icons.Material.Filled.AutoAwesome",
                BadgeIcon = "Icons.Material.Filled.Warning",
                BadgeIconColor = Color.Red,
                Action = () =>
                {
                    foreach (var notification in _notifications)
                    {
                        inputSelectNotifications.RemoveNotification(notification);
                    }

                    _notifications.Clear();
                }
            }, clearNotificationId));

            // todo: add one that can be removed and undone.


            var addNotificationNotificationId = $"{nameof(DemoNotifications)}_Add";
            _notifications.Add(inputSelectNotifications.Notify(new InputSelectNotificationConfig
            {
                Message = "Demo Notification 3",
                SecondaryMessage = "Click to add notification.",
                Icon = "Icons.Material.Filled.AutoAwesome",
                IconColor = Color.Yellow,
                BadgeIcon = "Icons.Material.Filled.Add",
                BadgeIconColor = Color.Green,
                Action = () =>
                {
                    var notificationId = Guid.NewGuid().ToString();
                    _notifications.Add(inputSelectNotifications.Notify(new InputSelectNotificationConfig
                    {
                        Message = "Added Demo Notification",
                        SecondaryMessage = "Click to remove me.",
                        Icon = "Icons.Material.Filled.AutoAwesome",
                        IconColor = Color.Orange,
                        Action = () => inputSelectNotifications.RemoveNotification(notificationId)
                    }, notificationId));
                }
            }, addNotificationNotificationId));
        });
    }
}