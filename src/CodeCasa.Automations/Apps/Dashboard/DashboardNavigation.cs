using CodeCasa.AutoGenerated;
using NetDaemon.AppModel;
using NetDaemon.HassModel;
using System.Reactive.Concurrency;
using System.Reactive.Linq;
using System.Text.Json.Serialization;
using CodeCasa.CustomEntities.Events;
using NetDaemon.Extensions.Observables;
using Reactive.Boolean;

namespace CodeCasa.Automations.Apps.Dashboard
{
    [NetDaemonApp]
    internal class LivingRoomPanelNavigation
    {
        public LivingRoomPanelNavigation(
            IHaContext context,
            AutomationEntities automationEntities,
            InputSelectEntities inputSelectEntities,
            IScheduler scheduler)
        {
            // Home should always go back to "Idle" after 30 seconds.
            inputSelectEntities.VariableLivingRoomWallPanelView
                .ToBooleanObservable(s => s.State != "Idle")
                .WhenTrueFor(TimeSpan.FromSeconds(30), scheduler)
                .Subscribe(_ => inputSelectEntities.VariableLivingRoomWallPanelView.SelectOption("Idle"));

            // todo: reset timer if any action is executed (e.g. on notifications).


            //mediaPlayerEntities.LivingRoomSpeaker.ToBoolObservable(s =>
            //    string.Equals("buffering", s.State, StringComparison.OrdinalIgnoreCase) ||
            //    string.Equals("playing", s.State, StringComparison.OrdinalIgnoreCase));

            ////frontendServices.SetTheme("dark_teal");
            //frontendServices.SetTheme("Home Assistant");
            ////frontendServices.SetTheme("Graphite");
            //frontendServices.SetTheme("Home_Assistant");
            //frontendServices.SetTheme("HomeAssistant");
            //frontendServices.SetTheme("Home-Assistant");




            context.Events
                .Filter<AutomationTriggeredEventData>(Events.AutomationTriggeredEvent)
                .Where(e => e.Data?.EntityId == automationEntities.WebhookLivingRoomWallPanelProximityDetected.EntityId)
                .Subscribe(_ =>
                {
                    if (inputSelectEntities.VariableLivingRoomWallPanelView.State == "Idle")
                    {
                        inputSelectEntities.VariableLivingRoomWallPanelView.SelectOption("Home");
                    }
                });
        }

        // ReSharper disable once ClassNeverInstantiated.Local
        private record AutomationTriggeredEventData
        {
            [JsonPropertyName("entity_id")] public string? EntityId { get; init; }
        }
    }
}
