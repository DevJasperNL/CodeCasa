using CodeCasa.AutoGenerated;
using NetDaemon.AppModel;
using NetDaemon.HassModel;
using System.Reactive.Concurrency;
using System.Reactive.Linq;
using System.Text.Json.Serialization;
using CodeCasa.CustomEntities.Events;
using CodeCasa.CustomEntities.InputSelect;
using CodeCasa.NetDaemon.Utilities.Entities;
using NetDaemon.Extensions.Observables;
using Reactive.Boolean;

namespace CodeCasa.Automations.Apps.Dashboard
{
    [NetDaemonApp]
    internal class LivingRoomPanelNavigation
    {
        public LivingRoomPanelNavigation(
            IHaContext context,
            AutomationEntities automationEntities,
            LivingRoomWallPanelView livingRoomWallPanelView,
            IScheduler scheduler)
        {
            // Home should always go back to "Idle" after 60 seconds.
            livingRoomWallPanelView
                .ToBooleanObservable(s => s.State != LivingRoomWallPanelView.States.Idle)
                .WhenTrueFor(TimeSpan.FromMinutes(1), scheduler)
                .Subscribe(_ => livingRoomWallPanelView.SelectOption(LivingRoomWallPanelView.States.Idle));

            // todo: reset timer if any action is executed (e.g. on notifications).

            context.Events
                .Filter<AutomationTriggeredEventData>(Events.AutomationTriggeredEvent)
                .Where(e => e.Data?.EntityId == automationEntities.WebhookLivingRoomWallPanelProximityDetected.EntityId)
                .Subscribe(_ =>
                {
                    if (livingRoomWallPanelView.State != LivingRoomWallPanelView.States.Idle)
                    {
                        return;
                    }
                    livingRoomWallPanelView.SelectOption(LivingRoomWallPanelView.States.Home);
                });
        }

        // ReSharper disable once ClassNeverInstantiated.Local
        private record AutomationTriggeredEventData
        {
            [JsonPropertyName("entity_id")] public string? EntityId { get; init; }
        }
    }
}
