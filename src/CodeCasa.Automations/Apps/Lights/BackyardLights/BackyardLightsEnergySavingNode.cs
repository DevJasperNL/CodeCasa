using System.Reactive.Concurrency;
using AutomationPipelines;
using CodeCasa.AutoGenerated;
using NetDaemon.Extensions.Observables;
using Occurify;
using Occurify.Reactive.Extensions;
using Occurify.TimeZones;
using Reactive.Boolean;

namespace CodeCasa.Automations.Apps.Lights.BackyardLights;

public class BackyardLightsEnergySavingNode<TState> : PipelineNode<TState>
{
    public BackyardLightsEnergySavingNode(CoverEntities coverEntities, TState energySavingState, IScheduler scheduler)
    {
        var timeWindow = PeriodTimeline.Between(TimeZoneInstants.DailyAt(23), TimeZoneInstants.DailyAt(6)).ToBooleanObservable(scheduler);

        var livingRoomCurtainsClosed = coverEntities.LivingRoomBackWindowCurtain.ToOpenClosedObservable().Not();
        var livingRoomRollerShutterClosed = coverEntities.LivingRoomRollerShutter.ToOpenClosedObservable().Not();
        var anyLivingRoomShutterClosed = livingRoomCurtainsClosed.Or(livingRoomRollerShutterClosed);

        var kitchenRollerShutterClosed = coverEntities.KitchenRollerShutter.ToOpenClosedObservable().Not();

        timeWindow
            .And(anyLivingRoomShutterClosed)
            .And(kitchenRollerShutterClosed)
            .SubscribeTrueFalse(() => Output = energySavingState, PassInputThrough);
    }
}